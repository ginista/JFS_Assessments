Task - 2
Introduction to OOPs in Java
1. Create a class Person with properties (name and age) with following features
      a. Default age of person should be 18
      b. A person object can be initialized with name and age
      c.Method to display name and age of person.

Person.java
   
public class Person {
	//data members
    private String name;
    private int age =18;
    
    //Constructor initializing name and age.
    public Person(String name, int age) {
    	this.name = name;
    	this.age  = age;
    }
    
    //Method to display name and age.
    public void display() {
    	System.out.println("Name : "+name);
    	System.out.println("Age : "+age);
    }
}

Main.java

public class Main {
   	public static void main(String[] args) {
		// Create a object for Person class
		Person person = new Person("Ginista",22); 
		//method to display name and age of a person.
		person.display();
	}
}

Output:
Name : Ginista
Age : 22

2. Create class Product (pid,price,quantity) with parameterised 
  constructor. Create a main function in different class (say xyz)
   ad perform following task:
   a. Accept five product information from user and store in an array.
   b.Find Pid of the product with the highest price.
   c. Create method (with array of product's object as argument) in xyz class
  to calculate and return the total amount spent on all products.
   (amount spent on single product = price of product * quantity of product.
 
Product.java

public class Product {
	//data members
	private int pid;
	private double price;
	private int quantity;
	
	//initializing the data members.
	public Product(int pid,int price,int quantity) {
		this.pid = pid;
		this.price = price;
		this.quantity = quantity;
	}
	
	//getters
	public double getPrice() {
		return price;
	}
	
	public int getPid(){
		return pid;
	}
	public int getQuantity() {
		return quantity;
	}

}

Main.java

import java.util.*;

public class Main {
	//method to calculate total amount
	public static double  totalAmount(Ques_2_Product products[]) {
		double totalAmount =0;
		for(int i=0;i<products.length;i++) {
			totalAmount +=products[i].getPrice()*products[i].getQuantity();
			
		}
		return totalAmount;
		
	}
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		Product products[] = new Product[5];
		
               //Getting input from user
		System.out.println("Enter information for five product : ");
		for(int i =0;i<products.length;i++) {
			System.out.println("Product "+(i+1)+":");
	       System.out.println("Product ID :");
			int pid = scan.nextInt();
			System.out.println("Price :");
			int price = scan.nextInt();
			System.out.println("Quantity");
			int quantity = scan.nextInt();
			
			
			//Create a product object and store it an array.
			products[i] = new Product(pid,price,quantity);
			}
		scan.close();
		
		//Find the product with highest price.
		int highestPriceProductId = -1;
		double highestPrice = Double.NEGATIVE_INFINITY;
		for(int i=0;i<products.length;i++) {
			if(products[i].getPrice()>highestPrice) {
				highestPriceProductId = products[i].getPid();
				highestPrice = products[i].getPrice();
			}
		}
		
		 // Display the product id with the highest price
        if (highestPriceProductId != -1) {
            System.out.println("Product with the Highest Price:");
            System.out.println("Product ID: " + highestPriceProductId);
            System.out.println("Price: $" + highestPrice);
        } else {
            System.out.println("No products found.");
        }
        System.out.println("Total amount spent : "+totalAmount(products));

	}
}

Output:
Enter information for five product : 
Product 1:
Product ID :
101
Price :
100
Quantity
1
Product 2:
Product ID :
102
Price :
200
Quantity
1
Product 3:
Product ID :
103
Price :
300
Quantity
3
Product 4:
Product ID :
104
Price :
400
Quantity
4
Product 5:
Product ID :
105
Price :
500
Quantity
5
Product with the Highest Price:
Product ID: 105
Price: $500.0
Total amount spent : 5300.0

3. Create a class Account with data member As Balance. Create twp
  constructor(no arguments annd two arguments) and perform following 
  task.
  a. method to deposit the amount to the account.
  b. method to withdraw the amount from the account.
  c. method to display the Balance.
 
Account.java

public class Account {
	private  double balance;
	private String name;
	private long accountnum;
	//Constructor with no argument
	public Account(){
		balance = 0.0;
	}
	//Constructor to initialize name and account number
	public Account(String name ,long accountnum){
		this.name = name;
		this.accountnum = accountnum;
		balance = 0.0;
		
	}
	
	//method to deposit amount.
	public  void deposit(double amount) {
		if(amount>0.0) {
		balance += amount;
		System.out.println("Deposited : $"+amount +" to "+this.accountnum);
		}
		else {
			System.out.println("Insufficient deposited amount");
		}
	}
	
	//method to withdraw amount.
	public  void withdraw(double amount) {
		if(balance>=amount && amount>0.0) {
		balance-=amount;
		System.out.print("Account number : " +this.accountnum);
		System.out.println(". Withdrawn amount.Balance $"+balance);
		}
		else if(amount> balance) {
			System.out.println("Insufficient balance.");
		}
		else {
			System.out.println("Invalid deposited amount");
		}
	}
	
	//diplay the balance amount.
	public  void display() {
		System.out.println("Balance : "+balance);
	}
	public static void main(String[] args) {
		
		//create a person_1 object and person deposit withdraw and display operations.
		Account person_1 = new Account("Ginista",1234566876);
		person_1.deposit(5000);
		person_1.withdraw(1500);
		person_1.display();
		
		//create a person_2 object and person deposit withdraw and display operations.
		Account person_2 = new Account("Antanin",987654323);
		person_2.deposit(10000);
		person_2.withdraw(2500);
		person_2.display();
	}
}

Output:

Deposited : $5000.0 to 1234566876
Account number : 1234566876. Withdrawn amount.Balance $3500.0
Balance : 3500.0
Deposited : $10000.0 to 987654323
Account number : 987654323. Withdrawn amount.Balance $7500.0
Balance : 7500.0

4.Define a base class Person with attributes name and age.
  Create a subclass EMployee that inherits from person and adds attributes
  like employeeID and salary.
  Use the super keyword to initialize the Person attributes in the 
  Employee constructor.
 
Person.java

public class Person {
	String name = "";
	 int age = 0;
         //consturctor to initialize name and age.
	 public Person(String name, int age) {
		 this.name = name;
		 this.age = age;
	 }
	 
         //Getters for name and age.
	 public String getName() {
		 return name;
	 }
	 
	 public int getAge() {
		 return age;
	 }
}

Employee.java

public class Employee extends Person{
	
	private int employeeID;
	private double salary;
	public Employee(String name, int age, int employeeID, double salary) {
		super(name,age);
		this.employeeID = employeeID;
		this.salary = salary;
	}
	
	public int getEmployeeID() {
		return employeeID;
	}
	public double getSalary() {
		return salary;
	}

	@Override
	public String toString() {
		return "[employeeID=" + employeeID + ", salary=" + salary + ", name=" + name + ", age=" + age
				+ "]";
	}
}

Main.java

public class Main {

	public static void main(String[] args) {
		//Create a object for employee class passing name, age employee id and salary.
		Person employee_1 = new Employee("Antanin Ginista",21,102,50000);
		System.out.println(employee_1);
		
		Person employee_2 = new Employee("Priya",25,105,85000);
		System.out.println(employee_2);

	}
}

Output:
[employeeID=102, salary=50000.0, name=Antanin Ginista, age=21]
[employeeID=105, salary=85000.0, name=Priya, age=25]









